import React from 'react';
import ReactDOM from 'react-dom';
import Slider from 'rc-slider';

// Integer fields when being "displayed" (view mode)
var integerFields = document.getElementsByClassName(['react-field-integer']);
Array.prototype.map.call(integerFields, function(element) {
  // Create a slider representing this field's value
    /*  Students: Code here  */
  // Render the slider in place of the original integer element
    /*  Students: Code here  */

});









// Add a slider to control integer form widgets
var integerFormFieldWrappers = document.getElementsByClassName(['react-field-form-integer']);
Array.prototype.map.call(integerFormFieldWrappers, function(element, i) {
  var integerFormElements = element.getElementsByClassName('form-number');
  var integerFormElement = integerFormElements[0];
  // Check if the integerFormElement has min and max set
  // If not, then using a slider wouldn't make much sense.
  /*  Students: fix the "if" statement  */
  if (false) {
    // Retrieve the values for min, max, value, and step from "integerFormElement"
      /*  Students: Code here  */

    // Create the Slider component using React.createElement and
    // passing the appropriate parameters
      /*  Students: Code here  */

    // Create a function named updateInputValue, pass it to the Slider's
    // onChange component, and ensure it takes two parameters: event, intValue.
    // Use its second parameter to set the value property of the original
    // input element automatically
      /*  Students: Code here  */

    // This finds where the slider will be rendered
    let renderLocation = element.getElementsByClassName('react-widget')[0];

    // Render the Slider component you created inside
    // of that location using ReactDOM.render()
      /*  Students: Code here  */

    // Bonus: Automatically update the slider when the input is manually changed
  }
});
